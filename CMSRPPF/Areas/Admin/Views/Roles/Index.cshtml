@model IPagedList<CMSRPPF.Areas.Admin.Models.RolesViewModel>
@using PagedList;
@using PagedList.Mvc;

@{
    ViewBag.Title = "Manage Roles";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutDashboard.cshtml";
}

<h2>Roles</h2>
<hr />
@if (User.IsInRole("Administrator"))
{
    <p>
        <a href="@Url.Action("Create", "Roles")" class="btn btn-primary rounded-0">
            <i class="fa fa-plus-circle"></i> Add New
        </a>
    </p>
}
    <table id="myTable" class="table table-hover table-bordered table-sm" cellspacing="0" width="100%">
        <thead class="thead-light">
            <tr>
                <th>
                    @Html.DisplayNameFor(_ => Model[0].RoleName)
                </th>
                <th>
                    @Html.DisplayNameFor(_ => Model[0].Count)
                </th>
                @if (User.IsInRole("Administrator"))
                {
                    <th></th>
                }
            </tr>
        </thead>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.RoleName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Count)
                </td>
                @if (User.IsInRole("Administrator"))
                {
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                    </td>
                }
            </tr>
        }

    </table>
    <br />

    <!--
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        FunctionToTransformEachPageLink = (liTag, aTag) =>
        {
            aTag.Attributes.Add("class", "page-link");
            liTag.InnerHtml = aTag.ToString();
            return liTag;
        },
        ContainerDivClasses = new[] { "pagination-container" },
        UlElementClasses = new[] { "pagination" },
        LiElementClasses = new[] { "page-item" }
    }
    )
        -->
